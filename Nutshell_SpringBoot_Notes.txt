
====> WAS ?! * What is SpringBoot? !

Spring Boot is a project that is built on the top of the Spring Framework. It provides an easier and faster way to set up, configure, and run both simple and web-based applications.

It is a Spring module that provides the RAD (Rapid Application Development) feature to the Spring Framework. It is used to create a stand-alone Spring-based application that you can just run because it needs minimal Spring configuration.

Spring Boot is the combination of Spring Framework and Embedded Servers. <! 

We can use Spring STS IDE or Spring Initializr to develop Spring Boot Java applications. <!

====> WIE ?! * Setting Up GENERAL WEB APP STUFF WITH SPRING INITIALZR

1. Go to https://start.spring.io/,
2. choose language and spring version
3. generate file
4. extract the zip and open build.gradle with intelliJ

5. go to github and create a new repo
6. add the repo as remote using cli in intelliJ
7. git add . git commit -m git push --set-upstream master master
8. Build project to test. If successfull, is ready to code.
project to test. If successfull, is ready to code.

====> SPRING SISTERS Projects I might needs

Spring WEB is enough;
Spring Data: It simplifies data access from the relational and NoSQL databases.



====> Coding steps to getUp And Running!

-> Create a Resource Representation Class
-> Create a Resource Controller for the previous
-> Build an executable JAR 
	gradle: gradlew bootRun
-> Run RestServiceApplication.java

====> SPICING UP: Adding MySQL
	/* https://spring.io/guides/gs/accessing-data-mysql/ */
	/* https://hub.docker.com/_/mysql/ */

> docker pull mysql
> docker run --name mysql_springboot1 -e MYSQL_ROOT_PASSWORD=muitoseguro -d mysql:5.6
	container: mysql_springboot1
> docker ps 
	the container must be listed

	
-> edit the build.gradle now to add mysql in the dependencies:
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'mysql:mysql-connector-java'
-> rebuild the project

-> run a mysql client in another container or within the previous
-> create a DB instance
-> create a user associated to a pass;
-> grant privileges to this user for the DB you created;

> docker exec -it mysql_springboot1 mysql -uroot -p

	mysql> create database db_example;
	mysql> create user 'springuser'@'%' identified by 'ThePassword';
	mysql> grant all on db_example.* to 'springuser'@'%';
	
-> Create the application.properties File to specify db is not H2 (default)
	might already exists under: src/main/resources/application.properties
-> paste the following content

	
	spring.jpa.hibernate.ddl-auto=update
	spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/demo_adminer_1
	spring.datasource.username=
	spring.datasource.password=example
	

====> SPECS DA DB NO CODIGO

-> Create the @Entity Model under com.example.accessingdatamysql
-> Create the Repository
-> Create a Controller or use the other one you set up before. 
-> Update GRADLE THROUGH gradle tool;
-> Build must be successfull :D!

After all that, you might have issues to recognize the new javax dependencies. I updated gradle through the Gradle tool that is shown on the IDE and the errors of module recon disappeared. perhaps i could have run gradlew bootSpring again and would be fixed.


> Shift Alt F10, to run
> then , as expected, i got an visibility issue:

Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

-> This is likely due to my containers not being visible to the external network. They are not on localhost as previous specified in the applications.properties!


I created ./demo/stack.yml with the following content
	# Use root/example as user/password credentials
	version: '3.1'

	services:

	  db:
		image: mysql
		command: --default-authentication-plugin=mysql_native_password
		restart: always
		environment:
		  MYSQL_ROOT_PASSWORD: example

	  adminer:
		image: adminer
		restart: always
		ports:
		  - 3306:3306

-> Then i did a deploy of that with the following 
> docker-compose -f stack.yml up

-> After finished I see:
 | 2020-11-07T03:12:00.829852Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: '8.0.22'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MyS
QL Community Server - GPL.

-> Open docker pannel and you will see now another stuff running :D 
-> Browser + http://localhost:8080 -> You shall see the mysql db set there !
-> Maybe we can now connect through navicat as well.



Next steps:

test client server through the application, by MainController.
